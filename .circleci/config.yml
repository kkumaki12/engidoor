version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-ecs: circleci/aws-ecs@2.1.0
  aws-cli: circleci/aws-cli@1.4.1
jobs:
  #job1
  test_back:
    docker:
      - image: circleci/ruby:3.0.0-node-browsers-legacy
        environment:
          RAILS_ENV: test
          DB_HOST: '127.0.0.1'
      - image: circleci/mysql:5.7.32
    working_directory: ~/engidoor/back

    steps:
      - checkout
      #- restore_cache:
       #   keys:
       #     - gem-cache-v2-{{ checksum "~/engidoor/back/Gemfile.lock" }}
       #    - gem-cache-v2-
      - run:
          name: Install bundler
          command: gem install bundler -v 2.2.15
          working_directory: back
      - run:
          name: Which bundler?
          command: bundle -v
          working_directory: back
      #- run:
      #    command: |
      #      gem install bundler
      #      bundle install
      #    working_directory: ~/engidoor/back
      - save_cache:
          key: gem-cache-v2-{{ checksum "~/engidoor/back/Gemfile.lock" }}
          paths:
            - ~/engidoor/back/vendor/bundle

      # Database setup
      - run:
          command: bundle exec rails db:create
          working_directory: ~/engidoor/back
      - run:
          command: bundle exec rails db:migrate
          working_directory: ~/engidoor/back
      - run:
          command: bundle exec rails db:seed --trace
          working_directory: ~/engidoor/back
      - run:
          name: create directory to store test results
          command: mkdir /tmp/test-results
          working_directory: ~/engidoor/back

      ## run tests
     # - run:
       #   name: RSpec
    #      command: |
     #       bundle exec rspec $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings) \
     #         || (printf "====== RETRYING...\n\n\n"; bundle exec rspec --only-failures)
     #     working_directory: ~/engidoor/back
     # - run:
      #    name: Rubocop
       #   command: bundle exec rubocop
        #  working_directory: ~/engidoor/back

      # collect engidoor
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: /home/circleci/engidoor/tmp/screenshots
  #job2
  test_front:
    docker:
      - image: circleci/node:15.10
        environment:
          NODE_ENV: test
    working_directory: ~/engidoor

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/engidoor/front/package.json" }}

      - run:
          name: install-packages
          command: npm install
          working_directory: ~/engidoor/front
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "~/engidoor/front/package.json" }}

      # - run:
      #     name: Run ESLint
      #     command: npm run lint
      #     working_directory: ~/engidoor/front

      #- run:
      #   name: test
      #    command: npm run test
      #    working_directory: ~/engidoor/front
#job3
  build_and_push_image_back:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          extra-build-args: '--build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}'
          account-url: AWS_ACCOUNT_URL
          repo: "engidoor-back-tf"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          path: './back'
          #dockerfile: Dockerfile
#job4
  build_and_push_image_front:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
            account-url: AWS_ACCOUNT_URL
            repo: "engidoor-front-tf"
            region: AWS_REGION
            tag: "${CIRCLE_SHA1}"
            path: './front'
            #dockerfile: Dockerfile
            


workflows:
  version: 2
  test:
    jobs:
      - test_back:
          filters:
            branches:
              only: master
      - test_front:
          filters:
            branches:
              only: master
      - build_and_push_image_back:
          requires:
           - test_front
           - test_back
          filters:
            branches:
              only: master
      - build_and_push_image_front:
          requires:
            - test_front
            - test_back
          filters:
            branches:
              only: master
      - aws-ecs/update-task-definition:
          family: engidoor-db-migrate-tf
          container-image-name-updates: 'container=engidoor-back-container-tf,tag=${CIRCLE_SHA1}'
          aws-region: AWS_REGION
          requires:
            - build_and_push_image_back
          filters:
            branches:
              only: master

      - aws-ecs/run-task:
          cluster: engidoor-ecs-cluster-tf
          task-definition: engidoor-db-migrate-tf
          subnet-ids: subnet-039a1710852bb7139, subnet-0d18332c424b061b4
          assign-public-ip: ENABLED
          security-group-ids: '${MIGRATION_SECURITY_GROUP_ID}'
          requires:
            - aws-ecs/update-task-definition
          filters:
            branches:
              only: master

      - aws-ecs/deploy-service-update:
            family: engidoor-front-task-tf
            service-name: engidoor-front-ecs-service-tf
            cluster-name: engidoor-ecs-cluster-tf
            container-image-name-updates: 'container=engidoor-front-container-tf,tag=${CIRCLE_SHA1}'
            requires:
              - build_and_push_image_front
            filters:
              branches:
                only: master
      - aws-ecs/deploy-service-update:
            requires:
              - build_and_push_image_front
              - build_and_push_image_back
            family: engidoor-back-task-tf
            service-name: engidoor-back-ecs-service-tf
            cluster-name: engidoor-ecs-cluster-tf
            container-image-name-updates: 'container=engidoor-back-container-tf,tag=${CIRCLE_SHA1}'
            filters:
              branches:
                only: master
